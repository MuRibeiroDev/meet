import express from 'express';
import bcrypt from 'bcrypt';
import crypto from 'crypto';
import Usuario from '../models/Usuario.js';
import { emailService } from '../services/email.service.js';
import { sequelize } from '../config/database.js';

const router = express.Router();

// Armazenamento tempor√°rio de c√≥digos (em produ√ß√£o, use Redis ou banco)
const resetCodes = new Map();

// POST /api/password/forgot - Solicitar c√≥digo de recupera√ß√£o
router.post('/forgot', async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ message: 'Email √© obrigat√≥rio' });
    }

    // Verificar se usu√°rio existe
    console.log('üìß [FORGOT] Verificando usu√°rio:', email);
    const usuario = await Usuario.findOne({ where: { email } });
    
    if (!usuario) {
      console.log('‚ùå [FORGOT] Usu√°rio n√£o encontrado:', email);
      return res.status(404).json({ message: 'Email n√£o encontrado' });
    }

    console.log('‚úÖ [FORGOT] Usu√°rio encontrado:', usuario.nome);

    // Gerar c√≥digo de 6 d√≠gitos
    const code = crypto.randomInt(100000, 999999).toString();
    console.log('üîë [FORGOT] C√≥digo gerado:', code);
    
    // Armazenar c√≥digo com expira√ß√£o de 15 minutos
    resetCodes.set(email, {
      code,
      expiresAt: Date.now() + 15 * 60 * 1000, // 15 minutos
      attempts: 0
    });
    console.log('üíæ [FORGOT] C√≥digo armazenado em mem√≥ria');

    // Enviar email com o c√≥digo de forma ass√≠ncrona (n√£o bloqueante)
    if (emailService.isConfigured()) {
      // Enviar email em background sem bloquear a resposta
      emailService.sendPasswordResetCode(email, usuario.nome, code)
        .then(() => {
          console.log(`üì® [FORGOT] Email enviado com c√≥digo: ${code}`);
        })
        .catch((error) => {
          console.error('‚ùå [FORGOT] Erro ao enviar email:', error);
        });
      
      // Responder imediatamente sem esperar o email
      console.log('‚ö° [FORGOT] Respondendo imediatamente (email em background)');
    } else {
      console.log(`‚ö†Ô∏è [FORGOT] Servi√ßo de email n√£o configurado. C√≥digo: ${code}`);
      return res.status(500).json({ message: 'Servi√ßo de email n√£o configurado' });
    }

    res.json({ message: 'C√≥digo enviado para seu email' });
  } catch (error) {
    console.error('Erro ao solicitar recupera√ß√£o de senha:', error);
    res.status(500).json({ message: 'Erro ao solicitar recupera√ß√£o de senha' });
  }
});

// POST /api/password/verify-code - Verificar c√≥digo de recupera√ß√£o
router.post('/verify-code', async (req, res) => {
  try {
    const { email, code } = req.body;
    console.log('üîç [VERIFY] Verificando c√≥digo para:', email);
    console.log('üîç [VERIFY] C√≥digo recebido:', code);

    if (!email || !code) {
      return res.status(400).json({ message: 'Email e c√≥digo s√£o obrigat√≥rios' });
    }

    const resetData = resetCodes.get(email);

    if (!resetData) {
      console.log('‚ùå [VERIFY] C√≥digo n√£o encontrado para:', email);
      return res.status(400).json({ message: 'C√≥digo inv√°lido ou expirado' });
    }

    console.log('üíæ [VERIFY] C√≥digo armazenado:', resetData.code);
    console.log('‚è∞ [VERIFY] Expira em:', new Date(resetData.expiresAt).toLocaleString());
    console.log('üî¢ [VERIFY] Tentativas:', resetData.attempts);

    // Verificar expira√ß√£o
    if (Date.now() > resetData.expiresAt) {
      console.log('‚è∞ [VERIFY] C√≥digo expirado!');
      resetCodes.delete(email);
      return res.status(400).json({ message: 'C√≥digo expirado. Solicite um novo c√≥digo' });
    }

    // Verificar tentativas
    if (resetData.attempts >= 3) {
      console.log('‚ùå [VERIFY] N√∫mero m√°ximo de tentativas excedido!');
      resetCodes.delete(email);
      return res.status(400).json({ message: 'N√∫mero m√°ximo de tentativas excedido. Solicite um novo c√≥digo' });
    }

    // Verificar c√≥digo
    if (resetData.code !== code) {
      resetData.attempts++;
      console.log('‚ùå [VERIFY] C√≥digo inv√°lido! Tentativa:', resetData.attempts);
      return res.status(400).json({ message: 'C√≥digo inv√°lido' });
    }

    console.log('‚úÖ [VERIFY] C√≥digo v√°lido!');
    res.json({ message: 'C√≥digo v√°lido', valid: true });
  } catch (error) {
    console.error('Erro ao verificar c√≥digo:', error);
    res.status(500).json({ message: 'Erro ao verificar c√≥digo' });
  }
});

// POST /api/password/reset - Redefinir senha
router.post('/reset', async (req, res) => {
  try {
    const { email, code, newPassword } = req.body;
    console.log('üîÑ [RESET] Iniciando reset de senha para:', email);

    if (!email || !code || !newPassword) {
      console.log('‚ùå [RESET] Dados incompletos');
      return res.status(400).json({ message: 'Email, c√≥digo e nova senha s√£o obrigat√≥rios' });
    }

    // Validar senha
    if (newPassword.length < 6) {
      console.log('‚ùå [RESET] Senha muito curta');
      return res.status(400).json({ message: 'A senha deve ter no m√≠nimo 6 caracteres' });
    }

    const resetData = resetCodes.get(email);
    console.log('üíæ [RESET] Dados do c√≥digo:', resetData ? 'Encontrado' : 'N√£o encontrado');

    if (!resetData) {
      console.log('‚ùå [RESET] C√≥digo n√£o encontrado');
      return res.status(400).json({ message: 'C√≥digo inv√°lido ou expirado' });
    }

    // Verificar expira√ß√£o
    if (Date.now() > resetData.expiresAt) {
      console.log('‚è∞ [RESET] C√≥digo expirado');
      resetCodes.delete(email);
      return res.status(400).json({ message: 'C√≥digo expirado. Solicite um novo c√≥digo' });
    }

    // Verificar c√≥digo
    if (resetData.code !== code) {
      console.log('‚ùå [RESET] C√≥digo incorreto');
      return res.status(400).json({ message: 'C√≥digo inv√°lido' });
    }

    console.log('‚úÖ [RESET] C√≥digo v√°lido, buscando usu√°rio...');

    // Buscar usu√°rio
    const usuario = await Usuario.findOne({ where: { email } });
    
    if (!usuario) {
      console.log('‚ùå [RESET] Usu√°rio n√£o encontrado');
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    }

    console.log('‚úÖ [RESET] Usu√°rio encontrado:', usuario.nome);

    // Atualizar senha
    console.log('üîê [RESET] Iniciando atualiza√ß√£o de senha');
    console.log('üîê [RESET] Nova senha recebida (length):', newPassword.length);
    
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    console.log('üîê [RESET] Hash gerado:', hashedPassword.substring(0, 20) + '...');
    
    // Atualizar direto no banco para evitar o beforeUpdate hook que faz hash duplo
    await sequelize.query(
      'UPDATE usuarios SET senha_hash = :senha_hash, atualizado_em = NOW() WHERE email = :email',
      {
        replacements: { senha_hash: hashedPassword, email },
        type: sequelize.QueryTypes.UPDATE
      }
    );

    console.log(`‚úÖ [RESET] Senha atualizada com sucesso para: ${email}`);

    // Remover c√≥digo usado
    resetCodes.delete(email);

    res.json({ message: 'Senha redefinida com sucesso' });
  } catch (error) {
    console.error('Erro ao redefinir senha:', error);
    res.status(500).json({ message: 'Erro ao redefinir senha' });
  }
});

export default router;
